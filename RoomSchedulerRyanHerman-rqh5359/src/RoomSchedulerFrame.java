
import java.sql.Array;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acv
 */
public class RoomSchedulerFrame extends javax.swing.JFrame
{

    
    /**
     * Creates new form RoomSchedulerFrame
     */
    public RoomSchedulerFrame()
    {
        initComponents();
        
        // Load the combo boxes with data.
        rebuildFacultyComboBoxes();
    }
    
    public void rebuildFacultyComboBoxes()
    {
        reserveFacultyComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray())); 
        deleteFacultyCB.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray())); 
        facultyStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(Faculty.getFacultyList().toArray()));
    }
    
    public void rebuildDatesComboBoxes()
    {
        reserveDateComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDatesList().toArray())); 
        dateReservationComboBox.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDatesList().toArray())); 
        deleteDateCB.setModel(new javax.swing.DefaultComboBoxModel(Dates.getDatesList().toArray())); 
    }
    
    public void rebuildRoomsComboBoxes(){
        
        dropRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(RoomEntry.getRoomsList().toArray()));
        
    }
    
  
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CancelPanel = new javax.swing.JTabbedPane();
        addFacultyPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        addFacultyTextField = new javax.swing.JTextField();
        addFacultyButton = new javax.swing.JButton();
        addFacultyStatusLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        AddRoomDatePanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        RoomNameTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        SeatsTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        addRoomButton = new javax.swing.JButton();
        dateTextField = new javax.swing.JTextField();
        addDateButton = new javax.swing.JButton();
        addRoomStatusLabel = new javax.swing.JLabel();
        addDateStatusLabel = new javax.swing.JLabel();
        addReservationStatusLabel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        reserveFacultyComboBox = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();
        reserveDateComboBox = new javax.swing.JComboBox<String>();
        jLabel6 = new javax.swing.JLabel();
        reserveSeatsTextField = new javax.swing.JTextField();
        reserveSubmitButton = new javax.swing.JButton();
        reserveStatusLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        deleteDateCB = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        deleteFacultyCB = new javax.swing.JComboBox();
        deleteButton = new javax.swing.JButton();
        deleteStatusLabel = new javax.swing.JLabel();
        cancelStatusLabel = new javax.swing.JLabel();
        deleteUpdateStatusLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        dropRoomComboBox = new javax.swing.JComboBox();
        dropRoomButton = new javax.swing.JButton();
        dropRoomStatusLabel = new javax.swing.JLabel();
        dropRoomUpdateStatusLabelReserve = new javax.swing.JLabel();
        dropRoomUpdateStatusLabelWaitlist = new javax.swing.JLabel();
        Reservations = new javax.swing.JPanel();
        checkReservationsButton = new javax.swing.JButton();
        dateReservationComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        reservationStatus = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        facultyStatusComboBox = new javax.swing.JComboBox();
        facultyStatusButton = new javax.swing.JButton();
        facultyReservationStatus = new javax.swing.JLabel();
        facultyWaitlistStatus = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        waitListButton = new javax.swing.JButton();
        waitListStatus = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Faculty Name: ");

        addFacultyTextField.setColumns(20);

        addFacultyButton.setText("Submit");
        addFacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFacultyButtonActionPerformed(evt);
            }
        });

        addFacultyStatusLabel.setText("    ");

        jLabel7.setText("   ");

        javax.swing.GroupLayout addFacultyPanelLayout = new javax.swing.GroupLayout(addFacultyPanel);
        addFacultyPanel.setLayout(addFacultyPanelLayout);
        addFacultyPanelLayout.setHorizontalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(addFacultyButton))
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addFacultyStatusLabel))
                    .addGroup(addFacultyPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7)))
                .addContainerGap(249, Short.MAX_VALUE))
        );
        addFacultyPanelLayout.setVerticalGroup(
            addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addFacultyPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(addFacultyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(addFacultyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(addFacultyButton)
                .addGap(18, 18, 18)
                .addComponent(addFacultyStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addContainerGap(317, Short.MAX_VALUE))
        );

        CancelPanel.addTab("Add Faculty", addFacultyPanel);

        jLabel8.setText("Add Room:");

        jLabel9.setText("Room Name:");

        RoomNameTextField.setColumns(10);
        RoomNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomNameTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("Seats:");

        SeatsTextField.setColumns(10);

        jLabel11.setText("Add Date (Month/Day/Year):");

        addRoomButton.setText("Add Room");
        addRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomButtonActionPerformed(evt);
            }
        });

        dateTextField.setColumns(10);
        dateTextField.setText("00/00/00");

        addDateButton.setText("Add Date");
        addDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddRoomDatePanelLayout = new javax.swing.GroupLayout(AddRoomDatePanel);
        AddRoomDatePanel.setLayout(AddRoomDatePanelLayout);
        AddRoomDatePanelLayout.setHorizontalGroup(
            AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(RoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(addRoomButton))
                            .addComponent(addRoomStatusLabel)))
                    .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(addDateButton))
                    .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(addDateStatusLabel)))
                .addContainerGap(236, Short.MAX_VALUE))
        );
        AddRoomDatePanelLayout.setVerticalGroup(
            AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(AddRoomDatePanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(RoomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)))
                .addGap(30, 30, 30)
                .addComponent(addRoomButton)
                .addGap(17, 17, 17)
                .addComponent(addRoomStatusLabel)
                .addGap(54, 54, 54)
                .addGroup(AddRoomDatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(addDateButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(addDateStatusLabel)
                .addGap(81, 81, 81))
        );

        CancelPanel.addTab("Add Room/Date", AddRoomDatePanel);

        jLabel4.setText("Faculty: ");

        jLabel5.setText("Date: ");

        jLabel6.setText("Seats Required: ");

        reserveSeatsTextField.setColumns(3);
        reserveSeatsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSeatsTextFieldActionPerformed(evt);
            }
        });

        reserveSubmitButton.setText("Submit");
        reserveSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveSubmitButtonActionPerformed(evt);
            }
        });

        reserveStatusLabel.setText("   ");

        javax.swing.GroupLayout addReservationStatusLabelLayout = new javax.swing.GroupLayout(addReservationStatusLabel);
        addReservationStatusLabel.setLayout(addReservationStatusLabelLayout);
        addReservationStatusLabelLayout.setHorizontalGroup(
            addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addReservationStatusLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(addReservationStatusLabelLayout.createSequentialGroup()
                            .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addGap(18, 18, 18)
                            .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(addReservationStatusLabelLayout.createSequentialGroup()
                            .addComponent(reserveSubmitButton)
                            .addGap(26, 26, 26)))
                    .addComponent(reserveStatusLabel))
                .addContainerGap(363, Short.MAX_VALUE))
        );
        addReservationStatusLabelLayout.setVerticalGroup(
            addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addReservationStatusLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(reserveFacultyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(reserveDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addReservationStatusLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(reserveSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(reserveSubmitButton)
                .addGap(18, 18, 18)
                .addComponent(reserveStatusLabel)
                .addContainerGap(268, Short.MAX_VALUE))
        );

        CancelPanel.addTab("Reserve Room", addReservationStatusLabel);

        deleteDateCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDateCBActionPerformed(evt);
            }
        });

        jLabel12.setText("Cancel Reservation:");

        jLabel13.setText("Date:");

        jLabel14.setText("Faculty:");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel15.setText("Drop Room:");

        jLabel16.setText("Room Name");

        dropRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        dropRoomButton.setText("Drop Room");
        dropRoomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropRoomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(dropRoomStatusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addGap(18, 18, 18)
                                        .addComponent(deleteFacultyCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel12)
                                    .addComponent(cancelStatusLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteUpdateStatusLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(79, 79, 79)
                                .addComponent(jLabel13)
                                .addGap(27, 27, 27)
                                .addComponent(deleteDateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(28, 28, 28)
                                .addComponent(dropRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(dropRoomButton))
                            .addComponent(dropRoomUpdateStatusLabelReserve)
                            .addComponent(dropRoomUpdateStatusLabelWaitlist)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(deleteButton)))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(deleteDateCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(deleteFacultyCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deleteButton)
                .addGap(12, 12, 12)
                .addComponent(cancelStatusLabel)
                .addGap(18, 18, 18)
                .addComponent(deleteUpdateStatusLabel)
                .addGap(26, 26, 26)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(dropRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomButton))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deleteStatusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dropRoomStatusLabel))
                .addGap(18, 18, 18)
                .addComponent(dropRoomUpdateStatusLabelReserve)
                .addGap(18, 18, 18)
                .addComponent(dropRoomUpdateStatusLabelWaitlist)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        CancelPanel.addTab("Cancel/Drop Room", jPanel1);

        checkReservationsButton.setText("Submit");
        checkReservationsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkReservationsButtonActionPerformed(evt);
            }
        });

        dateReservationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateReservationComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Check Reservation by Date:");

        jLabel17.setText("Check Reservation by Faculty:");

        facultyStatusButton.setText("Check Status");
        facultyStatusButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyStatusButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReservationsLayout = new javax.swing.GroupLayout(Reservations);
        Reservations.setLayout(ReservationsLayout);
        ReservationsLayout.setHorizontalGroup(
            ReservationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservationsLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(ReservationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(facultyWaitlistStatus)
                    .addComponent(facultyReservationStatus)
                    .addGroup(ReservationsLayout.createSequentialGroup()
                        .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(facultyStatusButton))
                    .addComponent(jLabel17)
                    .addComponent(reservationStatus)
                    .addComponent(jLabel3)
                    .addComponent(dateReservationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkReservationsButton))
                .addContainerGap(319, Short.MAX_VALUE))
        );
        ReservationsLayout.setVerticalGroup(
            ReservationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReservationsLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateReservationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkReservationsButton)
                .addGap(18, 18, 18)
                .addComponent(reservationStatus)
                .addGap(38, 38, 38)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ReservationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(facultyStatusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facultyStatusButton))
                .addGap(18, 18, 18)
                .addComponent(facultyReservationStatus)
                .addGap(35, 35, 35)
                .addComponent(facultyWaitlistStatus)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        CancelPanel.addTab("Reservation Status", Reservations);

        waitListButton.setText("Check Entire Waitlist");
        waitListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waitListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(waitListStatus)
                    .addComponent(waitListButton))
                .addContainerGap(337, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(waitListButton)
                .addGap(27, 27, 27)
                .addComponent(waitListStatus)
                .addContainerGap(366, Short.MAX_VALUE))
        );

        CancelPanel.addTab("Waitlist", jPanel2);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Room Scheduler");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CancelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CancelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFacultyButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addFacultyButtonActionPerformed
    {//GEN-HEADEREND:event_addFacultyButtonActionPerformed
        // Add the faculty to the faculty table.
        String name = addFacultyTextField.getText();
        Faculty.addFaculty(name);
        addFacultyStatusLabel.setText(name+" has been added to the Faculty.");
        
        // rebuild the reservation faculty combo box.
        rebuildFacultyComboBoxes();
      

       
    }//GEN-LAST:event_addFacultyButtonActionPerformed

    private void reserveSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSubmitButtonActionPerformed
        // TODO add your handling code here:
        //tab2 submit button
        String name = reserveFacultyComboBox.getSelectedItem().toString();
        String date = reserveDateComboBox.getSelectedItem().toString();
        String seats = reserveSeatsTextField.getText().toString();
         java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
          
        Integer index =0;
        try{
        String roomNumber = RoomQueries.getAllPossibleRooms(seats).get(index);
        
        Boolean waitlist = true;
        
        //check if date already used, if not, will automatically reserve room without checking further availability
        if(ReservationQuery.getAllPossibleDates().contains(date)){
            
            //Checks to see if there are any rooms available on the date
            for(int i=0; i<RoomQueries.getAllPossibleRooms(seats).size();i++){
                roomNumber = RoomQueries.getAllPossibleRooms(seats).get(i);
                //If there is a room open, reserves it
                if(ReservationQuery.getRoomsUsedbyDate(date).contains(roomNumber)==false){
                     ReservationQuery.addReservationEntry(name, roomNumber, date,seats, currentTimestamp);
                     reserveStatusLabel.setText(name + " has been added for " + date + " to Room Number "+ roomNumber);
                     waitlist = false;
                     break;
                }  
            }
        }
        else{
        
        ReservationQuery.addReservationEntry(name, roomNumber, date,seats, currentTimestamp);
        reserveStatusLabel.setText(name + " has been added for " + date + " to Room Number "+ roomNumber);
        waitlist = false;
        }
        //If all rooms are taken, adds to waitlist
        if(waitlist==true){
            reserveStatusLabel.setText(name + " has been WAITLISTED for " + date);
            WaitlistQueries.addWaitlistEntry(name, date, seats, currentTimestamp);
            
        }
        }
        catch(IndexOutOfBoundsException e){
            WaitlistQueries.addWaitlistEntry(name, date, seats, currentTimestamp);
            reserveStatusLabel.setText(name + " has been WAITLISTED for " + date);
        }
    }//GEN-LAST:event_reserveSubmitButtonActionPerformed

    private void reserveSeatsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveSeatsTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reserveSeatsTextFieldActionPerformed

    private void checkReservationsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkReservationsButtonActionPerformed
        // TODO add your handling code here:
        //Prints reservations status
        String date = dateReservationComboBox.getSelectedItem().toString();
        ArrayList<String> dateOrder = ReservationQuery.getReservationsDateOrder(date);
       
        StringBuilder sb = new StringBuilder();
        for (String i : dateOrder) {
     
            sb.append(i.toString());
            
        }
        reservationStatus.setText("<html>Faculty with rooms on " + date + ":<BR> " + sb.toString() +"<BR></html>");
        
    }//GEN-LAST:event_checkReservationsButtonActionPerformed

    private void dateReservationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateReservationComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateReservationComboBoxActionPerformed

    private void waitListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waitListButtonActionPerformed
        // TODO add your handling code here:
        //Prints waitlist status
        ArrayList<String> waitList = WaitlistQueries.getWaitlist();
        
        StringBuilder sb2 = new StringBuilder();
        for (String i : waitList) {
     
            sb2.append(i.toString());
            
        }
        waitListStatus.setText("<html> Faculty on waitlist: <BR>" + sb2.toString() +"<br></html>");
    }//GEN-LAST:event_waitListButtonActionPerformed

    private void addRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomButtonActionPerformed
        // TODO add your handling code here:
        //add Room to database
        String roomName = RoomNameTextField.getText();
        String roomSeats = SeatsTextField.getText();
        Integer roomSeats2 = Integer.parseInt(roomSeats);
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        
        ArrayList<String> dates = Dates.getDatesList();
        RoomEntry.addRoom(roomName, roomSeats);
        addRoomStatusLabel.setText("Room " + roomName + " with " + roomSeats + " seats has been added to the database");
        rebuildRoomsComboBoxes();
        
        //checks to see if it can add anyone to the room from the waitlist
        if(dates.isEmpty()==false){
        for(int i=0; i<dates.size(); i++){
            ArrayList<String> wb = WaitlistQueries.getWaitlistbyDate(dates.get(i));
            for(int j=0; j<wb.size();j++){
                if(Integer.parseInt(wb.get(j+2)) <= roomSeats2){ 
                    ReservationQuery.addReservationEntry(wb.get(j), roomName, wb.get(j+1), wb.get(j+2), currentTimestamp);
                    WaitlistQueries.deleteWaitlistEntry(wb.get(j), wb.get(j+1));
                    j=wb.size();
                }
                j+=3;
                
            }
            
                
        }
        }
        
    }//GEN-LAST:event_addRoomButtonActionPerformed

    private void addDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDateButtonActionPerformed
        // TODO add your handling code here:
        //adds a date
        String date = dateTextField.getText();
        Dates.addDate(date);
        addDateStatusLabel.setText("Date: " + date + " has been added to the database");
        rebuildDatesComboBoxes();
    }//GEN-LAST:event_addDateButtonActionPerformed

    private void RoomNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RoomNameTextFieldActionPerformed

    private void deleteDateCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDateCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDateCBActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        //deletes reservation/waitlist based of faculty and date
        String date = deleteDateCB.getSelectedItem().toString();
        String name = deleteFacultyCB.getSelectedItem().toString();
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());
        ArrayList<String> info;
        info = ReservationQuery.deleteReservationEntry(name,date);
        
        WaitlistQueries.deleteWaitlistEntry(name, date);
        if(info.isEmpty()==false){
        ArrayList<String> roomSeats = RoomEntry.getSeatsInRoom(info.get(1));
        Integer numSeats = Integer.parseInt(roomSeats.get(0));
        //Checks to see if anyone can replace the deleted entry
        ArrayList<String> wb = WaitlistQueries.getWaitlistbyDate(date);
            for(int j=0; j<wb.size();j++){
                if(Integer.parseInt(wb.get(j+2)) <= numSeats){ 
                    deleteUpdateStatusLabel.setText(wb.get(j) + " will be reserved in room " + info.get(1));
                    cancelStatusLabel.setText(name + " has been removed");
                    ReservationQuery.addReservationEntry(wb.get(j), info.get(1), wb.get(j+1), wb.get(j+2), currentTimestamp);
                    WaitlistQueries.deleteWaitlistEntry(wb.get(j), wb.get(j+1));
                    j=wb.size();
                }
                j+=3;
                
            }
            
        }
        else{
        cancelStatusLabel.setText(name + " has been removed");
        deleteUpdateStatusLabel.setText("");
        }
        
        
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void dropRoomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropRoomButtonActionPerformed
        // TODO add your handling code here:
        //deletes a room
        String roomName = dropRoomComboBox.getSelectedItem().toString();
        ArrayList<String> checkList = ReservationQuery.getReservationsByRoom(roomName);
        ArrayList<String> reservedRoomsList; 
         ArrayList<String> possibleRooms;
         Boolean waitlist = true;
         ArrayList<String> updateReserve = new ArrayList<String>();
         ArrayList<String> updateWaitlist = new ArrayList<String>();
         
        RoomEntry.dropRoom(roomName);
        rebuildRoomsComboBoxes();
        dropRoomStatusLabel.setText(roomName + " has been dropped");
        java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(Calendar.getInstance().getTime().getTime());

     //   dropRoomUpdateStatusLabel.setText(sb.toString());
        //deletes reservation and sees if it can replace a reservation in order of timestamp and best fit of room
        //in order of timestamp
        for(int i=0; i<checkList.size()-1; i++){
            waitlist=true;
            ReservationQuery.deleteReservationEntry(checkList.get(i),checkList.get(i+2));
            possibleRooms = RoomQueries.getAllPossibleRooms(checkList.get(i+3));
            reservedRoomsList = ReservationQuery.getRoomsUsedbyDate(checkList.get(i+2));
      
            for(int j=0; j<possibleRooms.size(); j++){
               if(reservedRoomsList.contains(possibleRooms.get(j))==false){
                   
                  // dropRoomUpdateStatusLabel.setText(checkList.get(i) + " will get room " + possibleRooms.get(j));
                   updateReserve.add(checkList.get(i));
                   updateReserve.add(possibleRooms.get(j));
                   updateReserve.add(checkList.get(i+2));
                   ReservationQuery.addReservationEntry(checkList.get(i), possibleRooms.get(j), checkList.get(i+2), checkList.get(i+3), currentTimestamp);
                   j=possibleRooms.size();
                   waitlist=false;
               }
 
            }
            //If it cant find a new room, its moved to waitlist
            if(waitlist==true){
               // dropRoomUpdateStatusLabel.setText(checkList.get(i)+ " has now been moved to waitlist");
                updateWaitlist.add(checkList.get(i));
                updateWaitlist.add(checkList.get(i+2));
                WaitlistQueries.addWaitlistEntry(checkList.get(i), checkList.get(i+2), checkList.get(i+3), currentTimestamp);
                
            }
         
            i+=4;    
         
        }
      
        //Outputs new status to user
        StringBuilder sb = new StringBuilder();
        
        if(updateReserve.isEmpty()==false){
        for(int i=0; i<updateReserve.size();i++){
            sb.append(updateReserve.get(i));
            sb.append(" has been moved to room:");
            sb.append(updateReserve.get(i+1));
            sb.append(" on ");
            sb.append(updateReserve.get(i+2));
            sb.append("-----");
            i+=2;
            
        }
        dropRoomUpdateStatusLabelReserve.setText("<html>" + sb.toString() +"</html>");
        }
        
        if(updateWaitlist.isEmpty()==false){
        StringBuilder sb2 = new StringBuilder();
        for(int i=0; i<updateWaitlist.size();i++){
            sb2.append(updateWaitlist.get(i));
            sb2.append(" on ");
            sb2.append(updateWaitlist.get(i+1));
            sb2.append(",");
            i++;
        }
        dropRoomUpdateStatusLabelWaitlist.setText("<html>" + sb2.toString() + " has been moved to waitlist" + "</html>");
        }
        
     
    }//GEN-LAST:event_dropRoomButtonActionPerformed

    private void facultyStatusButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyStatusButtonActionPerformed
        // TODO add your handling code here:
        //Outputs status to user by faculty
        String name = facultyStatusComboBox.getSelectedItem().toString();
        ArrayList<String> facultyReserved = ReservationQuery.getReservationsByFaculty(name);
        
         StringBuilder sb = new StringBuilder();
         if(facultyReserved.isEmpty()==false){
         for(int i=0; i<facultyReserved.size();i++){
            sb.append("room: "); 
            sb.append(facultyReserved.get(i));
            sb.append(" on ");
            sb.append(facultyReserved.get(i+1));
            sb.append(", ");
            i++;
        }
        facultyReservationStatus.setText(name + " has "+ sb.toString());
         }
         else{
             facultyReservationStatus.setText(name + " currently has no reservations");
         }
         
          ArrayList<String> facultyWaitlist = WaitlistQueries.getWaitlistByFaculty(name);
          StringBuilder sb2 = new StringBuilder();
         if(facultyWaitlist.isEmpty()==false){
         for(int i=0; i<facultyWaitlist.size();i++){
            sb2.append(", ");
            sb2.append(facultyWaitlist.get(i));
            
        }
        facultyWaitlistStatus.setText(name + " is waitlisted for a room on"+ sb2.toString());
         }
         else{
             facultyWaitlistStatus.setText(name + " currently has no waitlist entries");
         }
        
        
    }//GEN-LAST:event_facultyStatusButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(RoomSchedulerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new RoomSchedulerFrame().setVisible(true);
                
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AddRoomDatePanel;
    private javax.swing.JTabbedPane CancelPanel;
    private javax.swing.JPanel Reservations;
    private javax.swing.JTextField RoomNameTextField;
    private javax.swing.JTextField SeatsTextField;
    private javax.swing.JButton addDateButton;
    private javax.swing.JLabel addDateStatusLabel;
    private javax.swing.JButton addFacultyButton;
    private javax.swing.JPanel addFacultyPanel;
    private javax.swing.JLabel addFacultyStatusLabel;
    private javax.swing.JTextField addFacultyTextField;
    private javax.swing.JPanel addReservationStatusLabel;
    private javax.swing.JButton addRoomButton;
    private javax.swing.JLabel addRoomStatusLabel;
    private javax.swing.JLabel cancelStatusLabel;
    private javax.swing.JButton checkReservationsButton;
    private javax.swing.JComboBox dateReservationComboBox;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox deleteDateCB;
    private javax.swing.JComboBox deleteFacultyCB;
    private javax.swing.JLabel deleteStatusLabel;
    private javax.swing.JLabel deleteUpdateStatusLabel;
    private javax.swing.JButton dropRoomButton;
    private javax.swing.JComboBox dropRoomComboBox;
    private javax.swing.JLabel dropRoomStatusLabel;
    private javax.swing.JLabel dropRoomUpdateStatusLabelReserve;
    private javax.swing.JLabel dropRoomUpdateStatusLabelWaitlist;
    private javax.swing.JLabel facultyReservationStatus;
    private javax.swing.JButton facultyStatusButton;
    private javax.swing.JComboBox facultyStatusComboBox;
    private javax.swing.JLabel facultyWaitlistStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel reservationStatus;
    private javax.swing.JComboBox<String> reserveDateComboBox;
    private javax.swing.JComboBox<String> reserveFacultyComboBox;
    private javax.swing.JTextField reserveSeatsTextField;
    private javax.swing.JLabel reserveStatusLabel;
    private javax.swing.JButton reserveSubmitButton;
    private javax.swing.JButton waitListButton;
    private javax.swing.JLabel waitListStatus;
    // End of variables declaration//GEN-END:variables


}
